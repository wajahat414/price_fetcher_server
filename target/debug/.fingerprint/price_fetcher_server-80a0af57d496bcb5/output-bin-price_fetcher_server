{"$message_type":"diagnostic","message":"file not found for module `adapters`","code":{"code":"E0583","explanation":"A file wasn't found for an out-of-line module.\n\nErroneous code example:\n\n```compile_fail,E0583\nmod file_that_doesnt_exist; // error: file not found for module\n\nfn main() {}\n```\n\nPlease be sure that a file corresponding to the module exists. If you\nwant to use a module named `file_that_doesnt_exist`, you need to have a file\nnamed `file_that_doesnt_exist.rs` or `file_that_doesnt_exist/mod.rs` in the\nsame directory.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":136,"byte_end":149,"line_start":6,"line_end":6,"column_start":1,"column_end":14,"is_primary":true,"text":[{"text":"mod adapters;","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to create the module `adapters`, create file \"src/adapters.rs\" or \"src/adapters/mod.rs\"","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if there is a `mod adapters` elsewhere in the crate already, import it with `use crate::...` instead","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0583]\u001b[0m\u001b[0m\u001b[1m: file not found for module `adapters`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:6:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mmod adapters;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to create the module `adapters`, create file \"src/adapters.rs\" or \"src/adapters/mod.rs\"\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if there is a `mod adapters` elsewhere in the crate already, import it with `use crate::...` instead\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved imports `crate::adapters::binance`, `crate::adapters::kucoin`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":33,"byte_end":40,"line_start":2,"line_end":2,"column_start":23,"column_end":30,"is_primary":true,"text":[{"text":"use crate::adapters::{binance::binance_ws, kucoin::kucoin_ws};","highlight_start":23,"highlight_end":30}],"label":"could not find `binance` in `adapters`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":54,"byte_end":60,"line_start":2,"line_end":2,"column_start":44,"column_end":50,"is_primary":true,"text":[{"text":"use crate::adapters::{binance::binance_ws, kucoin::kucoin_ws};","highlight_start":44,"highlight_end":50}],"label":"could not find `kucoin` in `adapters`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `crate::adapters::binance`, `crate::adapters::kucoin`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:2:23\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::adapters::{binance::binance_ws, kucoin::kucoin_ws};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `kucoin` in `adapters`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `binance` in `adapters`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `clone` found for struct `DataAggregator` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":563,"byte_end":568,"line_start":19,"line_end":19,"column_start":76,"column_end":81,"is_primary":true,"text":[{"text":"    let binance_task = tokio::spawn(binance_ws(binance_symbols, aggregator.clone()));","highlight_start":76,"highlight_end":81}],"label":"method not found in `DataAggregator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/data_aggregator.rs","byte_start":110,"byte_end":135,"line_start":5,"line_end":5,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"pub struct DataAggregator {","highlight_start":1,"highlight_end":26}],"label":"method `clone` not found for this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is implemented and in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait defines an item `clone`, perhaps you need to implement it:\ncandidate #1: `Clone`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `clone` found for struct `DataAggregator` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:19:76\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let binance_task = tokio::spawn(binance_ws(binance_symbols, aggregator.clone()));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `DataAggregator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/data_aggregator.rs:5:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct DataAggregator {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `clone` not found for this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is implemented and in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait defines an item `clone`, perhaps you need to implement it:\u001b[0m\n\u001b[0m           candidate #1: `Clone`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `clone` found for struct `DataAggregator` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":646,"byte_end":651,"line_start":20,"line_end":20,"column_start":73,"column_end":78,"is_primary":true,"text":[{"text":"    let kucoin_task = tokio::spawn(kucoin_ws(kucoin_symbols, aggregator.clone()));","highlight_start":73,"highlight_end":78}],"label":"method not found in `DataAggregator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/data_aggregator.rs","byte_start":110,"byte_end":135,"line_start":5,"line_end":5,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"pub struct DataAggregator {","highlight_start":1,"highlight_end":26}],"label":"method `clone` not found for this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is implemented and in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait defines an item `clone`, perhaps you need to implement it:\ncandidate #1: `Clone`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `clone` found for struct `DataAggregator` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:20:73\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let kucoin_task = tokio::spawn(kucoin_ws(kucoin_symbols, aggregator.clone()));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `DataAggregator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/data_aggregator.rs:5:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct DataAggregator {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `clone` not found for this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is implemented and in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait defines an item `clone`, perhaps you need to implement it:\u001b[0m\n\u001b[0m           candidate #1: `Clone`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0282","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0282\nlet x = Vec::new();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nIn the example above, type `Vec` has a type parameter `T`. When calling\n`Vec::new`, barring any other later usage of the variable `x` that allows the\ncompiler to infer what type `T` is, the compiler needs to be told what it is.\n\nThe type can be specified on the variable:\n\n```\nlet x: Vec<i32> = Vec::new();\n```\n\nThe type can also be specified in the path of the expression:\n\n```\nlet x = Vec::<i32>::new();\n```\n\nIn cases with more complex types, it is not necessary to annotate the full\ntype. Once the ambiguity is resolved, the compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nApart from a method or function with a generic type parameter, this error can\noccur when a type parameter of a struct or trait cannot be inferred. In that\ncase it is not always possible to use a type annotation, because all candidates\nhave the same return type. For instance:\n\n```compile_fail,E0282\nstruct Foo<T> {\n    num: T,\n}\n\nimpl<T> Foo<T> {\n    fn bar() -> i32 {\n        0\n    }\n\n    fn baz() {\n        let number = Foo::bar();\n    }\n}\n```\n\nThis will fail because the compiler does not know which instance of `Foo` to\ncall `bar` on. Change `Foo::bar()` to `Foo::<T>::bar()` to resolve the error.\n"},"level":"error","spans":[{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":5104,"byte_end":5108,"line_start":138,"line_end":138,"column_start":28,"column_end":32,"is_primary":true,"text":[{"text":"                    if fut.poll(cx).is_pending() {","highlight_start":28,"highlight_end":32}],"label":"cannot infer type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":6048,"byte_end":6118,"line_start":168,"line_end":168,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        $crate::join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":6048,"byte_end":6118,"line_start":168,"line_end":168,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        $crate::join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":6198,"byte_end":6232,"line_start":174,"line_end":174,"column_start":9,"column_end":43,"is_primary":false,"text":[{"text":"        $crate::join!(@{ () (0) } $($e,)*)","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":662,"byte_end":694,"line_start":22,"line_end":22,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    join!(binance_task, kucoin_task);","highlight_start":5,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"join!","def_site_span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":2363,"byte_end":2380,"line_start":69,"line_end":69,"column_start":7,"column_end":24,"is_primary":false,"text":[{"text":"doc! {macro_rules! join {","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":2363,"byte_end":2380,"line_start":69,"line_end":69,"column_start":7,"column_end":24,"is_primary":false,"text":[{"text":"doc! {macro_rules! join {","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":2363,"byte_end":2380,"line_start":69,"line_end":69,"column_start":7,"column_end":24,"is_primary":false,"text":[{"text":"doc! {macro_rules! join {","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":2363,"byte_end":2380,"line_start":69,"line_end":69,"column_start":7,"column_end":24,"is_primary":false,"text":[{"text":"doc! {macro_rules! join {","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0282]\u001b[0m\u001b[0m\u001b[1m: type annotations needed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:22:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    join!(binance_task, kucoin_task);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::join` which comes from the expansion of the macro `join` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `poll` found for struct `Pin<_>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":5104,"byte_end":5108,"line_start":138,"line_end":138,"column_start":28,"column_end":32,"is_primary":true,"text":[{"text":"                    if fut.poll(cx).is_pending() {","highlight_start":28,"highlight_end":32}],"label":"method not found in `Pin<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":6048,"byte_end":6118,"line_start":168,"line_end":168,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        $crate::join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":6048,"byte_end":6118,"line_start":168,"line_end":168,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        $crate::join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":6198,"byte_end":6232,"line_start":174,"line_end":174,"column_start":9,"column_end":43,"is_primary":false,"text":[{"text":"        $crate::join!(@{ () (0) } $($e,)*)","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":662,"byte_end":694,"line_start":22,"line_end":22,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    join!(binance_task, kucoin_task);","highlight_start":5,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"join!","def_site_span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":2363,"byte_end":2380,"line_start":69,"line_end":69,"column_start":7,"column_end":24,"is_primary":false,"text":[{"text":"doc! {macro_rules! join {","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":2363,"byte_end":2380,"line_start":69,"line_end":69,"column_start":7,"column_end":24,"is_primary":false,"text":[{"text":"doc! {macro_rules! join {","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":2363,"byte_end":2380,"line_start":69,"line_end":69,"column_start":7,"column_end":24,"is_primary":false,"text":[{"text":"doc! {macro_rules! join {","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":2363,"byte_end":2380,"line_start":69,"line_end":69,"column_start":7,"column_end":24,"is_primary":false,"text":[{"text":"doc! {macro_rules! join {","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `poll` found for struct `Pin<_>` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:22:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    join!(binance_task, kucoin_task);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Pin<_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::join` which comes from the expansion of the macro `join` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0282","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0282\nlet x = Vec::new();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nIn the example above, type `Vec` has a type parameter `T`. When calling\n`Vec::new`, barring any other later usage of the variable `x` that allows the\ncompiler to infer what type `T` is, the compiler needs to be told what it is.\n\nThe type can be specified on the variable:\n\n```\nlet x: Vec<i32> = Vec::new();\n```\n\nThe type can also be specified in the path of the expression:\n\n```\nlet x = Vec::<i32>::new();\n```\n\nIn cases with more complex types, it is not necessary to annotate the full\ntype. Once the ambiguity is resolved, the compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nApart from a method or function with a generic type parameter, this error can\noccur when a type parameter of a struct or trait cannot be inferred. In that\ncase it is not always possible to use a type annotation, because all candidates\nhave the same return type. For instance:\n\n```compile_fail,E0282\nstruct Foo<T> {\n    num: T,\n}\n\nimpl<T> Foo<T> {\n    fn bar() -> i32 {\n        0\n    }\n\n    fn baz() {\n        let number = Foo::bar();\n    }\n}\n```\n\nThis will fail because the compiler does not know which instance of `Foo` to\ncall `bar` on. Change `Foo::bar()` to `Foo::<T>::bar()` to resolve the error.\n"},"level":"error","spans":[{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":5822,"byte_end":5833,"line_start":159,"line_end":159,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"                    fut.take_output().expect(\"expected completed future\")","highlight_start":25,"highlight_end":36}],"label":"cannot infer type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":6048,"byte_end":6118,"line_start":168,"line_end":168,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        $crate::join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":6048,"byte_end":6118,"line_start":168,"line_end":168,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        $crate::join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":6198,"byte_end":6232,"line_start":174,"line_end":174,"column_start":9,"column_end":43,"is_primary":false,"text":[{"text":"        $crate::join!(@{ () (0) } $($e,)*)","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":662,"byte_end":694,"line_start":22,"line_end":22,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    join!(binance_task, kucoin_task);","highlight_start":5,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"join!","def_site_span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":2363,"byte_end":2380,"line_start":69,"line_end":69,"column_start":7,"column_end":24,"is_primary":false,"text":[{"text":"doc! {macro_rules! join {","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":2363,"byte_end":2380,"line_start":69,"line_end":69,"column_start":7,"column_end":24,"is_primary":false,"text":[{"text":"doc! {macro_rules! join {","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":2363,"byte_end":2380,"line_start":69,"line_end":69,"column_start":7,"column_end":24,"is_primary":false,"text":[{"text":"doc! {macro_rules! join {","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":2363,"byte_end":2380,"line_start":69,"line_end":69,"column_start":7,"column_end":24,"is_primary":false,"text":[{"text":"doc! {macro_rules! join {","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0282]\u001b[0m\u001b[0m\u001b[1m: type annotations needed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:22:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    join!(binance_task, kucoin_task);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::join` which comes from the expansion of the macro `join` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `take_output` found for struct `Pin<_>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":5822,"byte_end":5833,"line_start":159,"line_end":159,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"                    fut.take_output().expect(\"expected completed future\")","highlight_start":25,"highlight_end":36}],"label":"method not found in `Pin<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":6048,"byte_end":6118,"line_start":168,"line_end":168,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        $crate::join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":6048,"byte_end":6118,"line_start":168,"line_end":168,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        $crate::join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":6198,"byte_end":6232,"line_start":174,"line_end":174,"column_start":9,"column_end":43,"is_primary":false,"text":[{"text":"        $crate::join!(@{ () (0) } $($e,)*)","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":662,"byte_end":694,"line_start":22,"line_end":22,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    join!(binance_task, kucoin_task);","highlight_start":5,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"join!","def_site_span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":2363,"byte_end":2380,"line_start":69,"line_end":69,"column_start":7,"column_end":24,"is_primary":false,"text":[{"text":"doc! {macro_rules! join {","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":2363,"byte_end":2380,"line_start":69,"line_end":69,"column_start":7,"column_end":24,"is_primary":false,"text":[{"text":"doc! {macro_rules! join {","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":2363,"byte_end":2380,"line_start":69,"line_end":69,"column_start":7,"column_end":24,"is_primary":false,"text":[{"text":"doc! {macro_rules! join {","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/Users/wajahat/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.41.1/src/macros/join.rs","byte_start":2363,"byte_end":2380,"line_start":69,"line_end":69,"column_start":7,"column_end":24,"is_primary":false,"text":[{"text":"doc! {macro_rules! join {","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `take_output` found for struct `Pin<_>` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:22:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    join!(binance_task, kucoin_task);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Pin<_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::join` which comes from the expansion of the macro `join` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 8 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 8 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0282, E0432, E0583, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0282, E0432, E0583, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0282`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0282`.\u001b[0m\n"}
